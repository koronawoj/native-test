// eslint-disable-next-line import/no-relative-parent-imports
import { writeFile } from '../../../server/stdfs';
import { fixToCamelCase } from './fixToCamelCase';
import { generateParamsType } from './generateParamsType';
import { generateResponseIO } from './generateResponseIO';
import { OpenApiMethodType, SpecHandlerType } from './getSpecOpenApi';

const checkUniqueParam = (spec: SpecHandlerType): void => {
    const exist: Set<string> = new Set();

    for (const param of spec.parameters) {
        if (exist.has(param.name)) {
            throw Error('Conflict of parameter names');
        }

        exist.add(param.name);
    }
};

const checkBodyParam = (spec: SpecHandlerType): void => {
    const onlyBody = spec.parameters.filter(item => item.in === 'body');

    if (onlyBody.length > 1) {
        throw Error('A maximum of one body parameter was expected');
    }
};

const getBody = (spec: SpecHandlerType): string => {
    for (const param of spec.parameters) {
        if (param.in === 'body') {
            return `params.${param.name}`;
        }
    }

    return 'undefined';
};

const getMethod = (method: OpenApiMethodType): string => {
    return `'${method.toUpperCase()}'`;
};

const generateUrlItem = (urlChunk: string): string => {
    /*
    convert chunk:
    {universe}
    ${params.universe}
    */

    const chars = urlChunk.split('');

    const first = chars.shift();
    const last = chars.pop();

    if (first === '{' && last === '}') {
        const inner = chars.join('');
        return `\${params.${fixToCamelCase(inner)}}`;
    }

    return urlChunk;
};

const addImportQueryString = (spec: SpecHandlerType): string => {
    for (const param of spec.parameters) {
        if (param.in === 'query') {
            return 'import qs from \'query-string\';';
        }
    }

    return '';
};

const generateUrl = (url: string, spec: SpecHandlerType): string => {
    /*
        convert url:
        /website-cms/{universe}/landing/landing_promo_page
        /website-cms/${params.universe}/landing/landing_promo_page
    */

    const baseUrl = url.split('/').map(generateUrlItem).join('/');

    const queryParams: Array<string> = [];

    for (const param of spec.parameters) {
        if (param.in === 'query') {
            queryParams.push(param.name);
        }
    }

    if (queryParams.length > 0) {
        const paramchunks: Array<string> = [];

        for (const paramName of queryParams) {
            paramchunks.push(`'${paramName}': params.${fixToCamelCase(paramName)}`);
        }

        const query = `\${qs.stringify({ ${paramchunks.join(', ')} }, { skipNull: true })}`;
        return `${baseUrl}?${query}`;

    } else {
        return baseUrl;
    }

};

const createContent = (nameInFile: string, url: string, method: OpenApiMethodType, spec: SpecHandlerType): string => {
    return `//The contents of this file have been generated automatically. Do not edit this file.

import * as t from 'io-ts';
import { isRight } from 'fp-ts/lib/Either';
import { fetchGeneralRaw, FetchGeneralRawResponseType } from 'src_common/common/fetch';
import { ApiTimeLog } from 'src_common/server/webDriver/logFormat';
${addImportQueryString(spec)}


${generateParamsType(spec)}


${generateResponseIO(spec, url, method)}


export const ${nameInFile} = async (api_url: string, api_timeout: number, backendToken: string, params: ParamsType): Promise<FetchGeneralRawResponseType> => {
    const url = \`\${api_url}${generateUrl(url, spec)}\`;
    const method = ${getMethod(method)};
    const paramsFetch = {
        url,
        body: ${getBody(spec)},
        backendToken,
        timeout: api_timeout,
    };

    const apiTime = ApiTimeLog.createWithProcessEnv(method, url);
    const response = await fetchGeneralRaw(method, paramsFetch);
    apiTime.show(response.status);
    return response;
};
`;
};

export const generateMethod = async (asFile: string, nameInFile: string, url: string, method: OpenApiMethodType, spec: SpecHandlerType): Promise<void> => {

    checkUniqueParam(spec);
    checkBodyParam(spec);

    //TODO - Add the handling  when the parameters are conflicting

    console.info(`Generate file ${url} ${method} -> ${nameInFile}`);

    const content = createContent(nameInFile, url, method, spec);
    await writeFile(asFile, content);
};
