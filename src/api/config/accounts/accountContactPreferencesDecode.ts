import * as t from 'io-ts';
import { buildValidator } from "@twoupdigital/mobx-utils/libjs/buildValidator";
import { decodeString, decodeNumber, decodeNumberOrNull, decodeBoolean, decodeStringOrNull, decodeBooleanOrNull, decodeStringArr, buildOptionalDecoderModel } from 'src/api/utils/commonModelValidators';
import { buildModelValidator, buildApiItemDefault } from 'src/api/utils/modelUtils';

const decodePhone = buildValidator('Phone', t.interface({
    country: t.string,
    number: t.string,
    prefix: t.string,
}));

const modelConfig = {
    promoID: buildApiItemDefault(decodeNumberOrNull, null),
    chatEnabled:  buildApiItemDefault(decodeBoolean, false),
    realityCheckFrequency: buildApiItemDefault(decodeNumberOrNull, null),
    addressLine1: buildApiItemDefault(decodeString, ''),
    dailyDepositLimitRequestDate: buildApiItemDefault(decodeStringOrNull, null),
    city: buildApiItemDefault(decodeString, ''),
    weeklyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    securityNotes: buildApiItemDefault(decodeStringOrNull, null),
    dailyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    playBreakExpiry: buildApiItemDefault(decodeStringOrNull, null),
    ageVerification: buildApiItemDefault(decodeString, ''),
    requestedDailyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    stakeFactorInPlaySports: buildApiItemDefault(decodeStringArr, []),
    statusDescription: buildApiItemDefault(decodeStringOrNull, null),
    universePrefix: buildApiItemDefault(decodeString, ''),
    selfExclusionDuration: buildApiItemDefault(decodeNumberOrNull, null),
    printedStatement: buildApiItemDefault(decodeBoolean, false),
    commission: buildApiItemDefault(decodeBoolean, false),
    postCode: buildApiItemDefault(decodeString, ''),
    email: buildApiItemDefault(decodeString, ''),
    realityCheckFrequencyDateSet: buildApiItemDefault(decodeStringOrNull, null),
    dailyDepositLimitDateSet: buildApiItemDefault(decodeStringOrNull, null),
    telebettingId: buildApiItemDefault(decodeStringOrNull, null),
    requestedRealityCheckFrequency: buildApiItemDefault(decodeNumberOrNull, null),
    bankAccountSortCode: buildApiItemDefault(decodeStringOrNull, null),
    creditLimit: buildApiItemDefault(decodeNumber, 0),
    telebettingPassword: buildApiItemDefault(decodeStringOrNull, null),
    monthlyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    surname: buildApiItemDefault(decodeString, ''),
    watchlist: buildApiItemDefault(decodeBoolean, false),
    gamStopVerification: buildApiItemDefault(decodeString, ''),
    contactPreferences:  buildApiItemDefault(decodeStringArr, []),
    country: buildApiItemDefault(decodeString, ''),
    mobilePhone: buildApiItemDefault(buildOptionalDecoderModel(decodePhone), null),
    creditAccount: buildApiItemDefault(decodeBoolean, false),
    betReferralEnabled: buildApiItemDefault(decodeBoolean, false),
    weeklyDepositLimitDateSet: buildApiItemDefault(decodeStringOrNull, null),
    county: buildApiItemDefault(decodeStringOrNull, null),
    realityCheckFrequencyRequestDate: buildApiItemDefault(decodeStringOrNull, null),
    stakeFactorInPlay: buildApiItemDefault(decodeNumber, 0),
    kycStatus: buildApiItemDefault(decodeString, ''),
    firstName: buildApiItemDefault(decodeString, ''),
    playBreakDuration: buildApiItemDefault(decodeNumberOrNull, null),
    birthDate: buildApiItemDefault(decodeString, ''),
    cashoutEnabled: buildApiItemDefault(decodeBoolean, false),
    tradingNotes: buildApiItemDefault(decodeStringOrNull, null),
    bpEnabled: buildApiItemDefault(decodeBoolean, false),
    weeklyDepositLimitRequestDate: buildApiItemDefault(decodeStringOrNull, null),
    reactivationRequestedDate:buildApiItemDefault(decodeStringOrNull, null),
    monthlyDepositLimitRequestDate: buildApiItemDefault(decodeStringOrNull, null),
    selfExclusionDate: buildApiItemDefault(decodeStringOrNull, null),
    marketing: buildApiItemDefault(decodeBooleanOrNull, null),
    roles: buildApiItemDefault(decodeStringArr, []),
    landlinePhone: buildApiItemDefault(buildOptionalDecoderModel(decodePhone), null),
    selfExclusionExpiry: buildApiItemDefault(decodeStringOrNull, null),
    creditPaymentTerms: buildApiItemDefault(decodeString, ''),
    amlStatus: buildApiItemDefault(decodeString, ''),
    status: buildApiItemDefault(decodeString, ''),
    requestedMonthlyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    addressLine2: buildApiItemDefault(decodeStringOrNull, null),
    requestedWeeklyDepositLimit: buildApiItemDefault(decodeNumberOrNull, null),
    kycRequestExpireDate: buildApiItemDefault(decodeStringOrNull, null),
    passwordResetToken: buildApiItemDefault(
        buildValidator('', t.union([
            t.interface({
                sourceIp: t.string,
                token: t.string,
                validFrom: t.number,
                validTo: t.number,
                sentVia: t.string,
                attempts: t.number
            }),
            t.null
        ])),
        null
    ),
    cancelWithdrawal: buildApiItemDefault(decodeBooleanOrNull, null),
    stakeFactorSports: buildApiItemDefault(decodeStringArr, []),
    quickBetReferralEnabled: buildApiItemDefault(decodeBoolean, false),
    isHVC: buildApiItemDefault(decodeBoolean, false),
    currency: buildApiItemDefault(decodeString, ''),
    referrer: buildApiItemDefault(decodeStringOrNull, null),
    mailingEnabled: buildApiItemDefault(decodeBoolean, false),
    title: buildApiItemDefault(decodeString, ''),
    bankAccountNumber: buildApiItemDefault(decodeStringOrNull, null),
    type: buildApiItemDefault(decodeString, ''),
    oddsFormat: buildApiItemDefault(decodeString, ''),
    failedLoginAttempts: buildApiItemDefault(decodeNumber, 0),
    terms: buildApiItemDefault(
        buildValidator('', t.union([ t.boolean, t.null ])),
        null
    ),
    playBreakRequestDate: buildApiItemDefault(decodeStringOrNull, null),
    statementFrequency: buildApiItemDefault(decodeString, ''),
    monthlyDepositLimitDateSet: buildApiItemDefault(decodeStringOrNull, null),
    ringFencedFunds: buildApiItemDefault(decodeBoolean, false),
    incomeaccess: buildApiItemDefault(decodeStringOrNull, null),
    stakeFactor: buildApiItemDefault(decodeNumber, 0),
    antePostRules: buildApiItemDefault(decodeBoolean, false),
    coolingOffPeriodHours: buildApiItemDefault(decodeNumberOrNull, null),
    amlWatchlist: buildApiItemDefault(decodeBoolean, false),
    id: buildApiItemDefault(decodeNumber, 0),
    universe: buildApiItemDefault(decodeString, ''),
    name: buildApiItemDefault(decodeString, ''),
    url: buildApiItemDefault(decodeString, ''),
    passwordResetTokenUrl: buildApiItemDefault(decodeString, ''),
    resetPasswordUrl: buildApiItemDefault(decodeString, ''),
    walletUrl: buildApiItemDefault(decodeString, ''),
    transactionUrl: buildApiItemDefault(decodeString, ''),
    assetFlowsUrl: buildApiItemDefault(decodeString, ''),
    statementsUrl: buildApiItemDefault(decodeString, ''),
    revision: buildApiItemDefault(decodeNumber, 0)
};

export const decodeContactPreferencesModel = buildModelValidator('Contact preferences data', modelConfig);

export type ContactPreferencesModelType = ReturnType<typeof decodeContactPreferencesModel>;
